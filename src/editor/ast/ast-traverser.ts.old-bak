import { makeTraveler } from 'astravel';
import type { Node, CallExpression, Identifier, MemberExpression, Literal, UnaryExpression } from 'acorn';
import { extractFunctionNameFromCode, countParametersBeforePosition } from '../../utils/code-utils';
import type { HydraInstance, FunctionInfo, HydraParameter, TraversalState } from './types';

/**
 * Traverses Abstract Syntax Trees (AST) of Hydra code to analyze and extract information
 * about numeric values, function calls, and parameter positions. Handles complex method
 * chaining patterns and maintains context during traversal.
 * 
 * Key features:
 * - Tracks function call chains (e.g., osc().color().out())
 * - Identifies parameter positions within function calls
 * - Extracts metadata about values (numbers, sources, outputs)
 * - Maintains parent-child relationships during traversal
 */
export class ASTTraverser {
    private hydra: HydraInstance;

    /**
     * Creates a new ASTTraverser instance
     * @param hydra - The Hydra instance used for accessing transform definitions and source/output references
     */
    constructor(hydra: HydraInstance) {
        this.hydra = hydra;
    }

    /**
     * Extracts the function name and starting position from an AST node within a method chain.
     * Handles both standalone function calls and method chains.
     * 
     * Examples of supported patterns:
     * - Standalone: osc(10)
     * - Method chain: osc(10).color(1,1).out()
     * - Nested: solid(1).add(osc(10), 0.5)
     */
    private _getFunctionNameFromAST(node: Node, parents: Node[]): FunctionInfo | null {
        // For nested calls like solid(1).add(osc(10)), we want osc not solid
        // Find the innermost CallExpression that contains our node
        let targetCallExpr: CallExpression | null = null;

        // First, find the CallExpression that directly contains our node
        for (let i = parents.length - 1; i >= 0; i--) {
            const parent = parents[i];
            if (parent.type === 'CallExpression') {
                // Check if this call expression contains our node in its arguments
                const containsNode = (parent as CallExpression).arguments.some(arg => {
                    // Direct match
                    if (arg === node) return true;
                    // Match through UnaryExpression (for negative numbers)
                    if (arg.type === 'UnaryExpression' && arg.argument === node) return true;
                    return false;
                });

                if (containsNode) {
                    targetCallExpr = parent as CallExpression;
                    break;
                }
            }
        }

        if (!targetCallExpr) return null;

        // Get the function name from the target call expression
        if (targetCallExpr.callee.type === 'Identifier') {
            return {
                name: (targetCallExpr.callee as Identifier).name,
                startCh: targetCallExpr.callee.loc?.start.column ?? 0
            };
        }
        if (targetCallExpr.callee.type === 'MemberExpression') {
            const memberExpr = targetCallExpr.callee as MemberExpression;
            const property = memberExpr.property as Identifier;
            return {
                name: property.name,
                startCh: property.loc?.start.column ?? 0
            };
        }

        return null;
    }

    /**
     * Determines the parameter index of a node within its parent function call.
     * For example, in color(1, 0.5, 1), the '0.5' value has parameter index 1.
     */
    private _getParameterCount(node: Node, parents: Node[]): number {
        const parent = parents[parents.length - 1];
        if (!parent || parent.type !== 'CallExpression') return 0;

        const callExpr = parent as CallExpression;
        const paramIndex = callExpr.arguments.findIndex(arg => arg === node);
        return paramIndex === -1 ? callExpr.arguments.length : paramIndex;
    }

    /**
     * Generate a unique key for a value based on its context in the code.
     * Includes function name, parameter name, and position information to ensure uniqueness.
     * 
     * Examples:
     * - osc(10, 0.5) -> osc_freq_line1_pos3_value, osc_sync_line1_pos7_value
     * - osc(10).rotate(6.22) -> osc_freq_line1_pos3_value, rotate_angle_line1_pos12_value
     */
    private _generateKey({
        paramName, 
        functionName, 
        lineNumber, 
        ch, 
        parameterIndex
    }: Partial<HydraParameter>): string {
        const paramPart = paramName ??`param${parameterIndex}`;
        return `${functionName}_${paramPart}_line${lineNumber}_pos${ch}_value`;
    }

    private _generateFunctionId({
        functionName, 
        lineNumber, 
        functionStartCh, 
        ch
    }: Partial<HydraParameter>): string {
        const position = functionStartCh ?? ch;
        return `${functionName}_line${lineNumber}_pos${position}`;
    }

    /**
     * Traverses an AST to find all numeric values, source references, and output references.
     * For each value found, collects detailed metadata including:
     * - Value and its type (number, source, output)
     * - Position in code (line, column, length)
     * - Containing function and parameter information
     * - Parameter metadata from Hydra transform definitions
     */
    findValues(ast: Node | null, code: string | null): HydraParameter[] {
        if (!ast || !code) return [];

        const matches: HydraParameter[] = [];
        let currentIndex = 0;

        try {
            // Get available sources and outputs from hydra
            const availableOutputs = Array.from({ length: 4 }, (_, i) => this.hydra?.o?.[i]?.label ?? `o${i}`);
            const availableSources = Array.from({ length: 4 }, (_, i) => this.hydra?.s?.[i]?.label ?? `s${i}`);

            // Bind the instance methods we need in the traveler
            const getFunctionName = this._getFunctionNameFromAST.bind(this);
            const getParamCount = this._getParameterCount.bind(this);
            const generateKey = this._generateKey.bind(this);
            const hydra = this.hydra;
            const generateFunctionId = this._generateFunctionId.bind(this);
            const traveler = makeTraveler({
                go: function(node: Node, state: TraversalState) {
                    if (!node || typeof node !== 'object') return;

                    // Handle numeric literals
                    if (node.type === 'Literal' && typeof (node as Literal).value === 'number') {
                        const line = code.split('\n')[(node.loc?.start.line ?? 1) - 1];
                        // Skip if line contains loadScript or await loadScript
                        if (!line?.includes('loadScript') && !line?.includes('await loadScript')) {
                            const lineStart = (node.loc?.start.line ?? 1) - 1;
                            
                            // Check if this number is part of a UnaryExpression
                            const parent = state.parents[state.parents.length - 1];
                            const nodeToUse = parent?.type === 'UnaryExpression' ? parent : node;
                            
                            // Try to get function name from AST first
                            let functionInfo = getFunctionName(nodeToUse, state.parents ?? []);
                            let paramCount = getParamCount(nodeToUse, state.parents ?? []);

                            console.log('Function info', functionInfo);
                            console.log('Param count', paramCount);

                            // Fall back to regex if AST method fails
                            if (!functionInfo && line) {
                                const beforeContent = line.substring(0, node.loc?.start.column ?? 0);
                                const name = extractFunctionNameFromCode(beforeContent);
                                if (name) {
                                    functionInfo = {
                                        name,
                                        startCh: beforeContent.lastIndexOf(name)
                                    };
                                }
                                if (!paramCount) {
                                    const lastDotIndex = beforeContent.lastIndexOf('.');
                                    if (lastDotIndex !== -1) {
                                        const afterFunction = beforeContent.slice(lastDotIndex + 1);
                                        paramCount = countParametersBeforePosition(afterFunction);
                                    }
                                }
                            }

                            // Only add if we found a valid function context
                            if (functionInfo) {
                                // Get transform info for parameter name
                                const transform = state.hydra?.generator?.glslTransforms?.[functionInfo.name];
                                console.log('Hydra transform', transform);
                                const paramInfo = transform?.inputs?.[paramCount];
                                const paramName = paramInfo?.name ?? `val${paramCount + 1}`;
                                const paramType = paramInfo?.type;
                                const paramDefault = paramInfo?.default;

                                // Check for unary minus operator
                                let value = (node as Literal).value as number;
                                let startColumn = node.loc?.start.column ?? 0;
                                let length = (node.loc?.end.column ?? 0) - startColumn;
                                
                                // If there's a unary minus before this number
                                if (parent?.type === 'UnaryExpression' && (parent as UnaryExpression).operator === '-') {
                                    value = -value;
                                    startColumn = parent.loc?.start.column ?? 0;
                                    length = (parent.loc?.end.column ?? 0) - startColumn;
                                }

                                console.log('functioninfo', functionInfo);
                                
                                matches.push({
                                    value,
                                    lineNumber: lineStart,
                                    ch: startColumn,
                                    length,
                                    index: currentIndex++,
                                    functionName: functionInfo.name,
                                    functionStartCh: functionInfo.startCh,
                                    functionId: generateFunctionId({
                                        functionName: functionInfo.name,
                                        paramName,
                                        lineNumber: lineStart,
                                        ch: startColumn,
                                        parameterIndex: paramCount
                                    }),
                                    parameterIndex: paramCount,
                                    paramName,
                                    paramType,
                                    paramDefault,
                                    paramCount,
                                    type: 'number',
                                    key: generateKey({
                                        functionName: functionInfo.name,
                                        paramName,
                                        lineNumber: lineStart,
                                        ch: startColumn,
                                        parameterIndex: paramCount
                                    })
                                });
                            }
                        }
                    }
                    // Handle source/output references
                    else if (node.type === 'Identifier') {
                        const name = (node as Identifier).name;
                        const isOutput = availableOutputs.includes(name);
                        const isSource = availableSources.includes(name);
                        
                        if (isOutput || isSource) {
                            const lineStart = (node.loc?.start.line ?? 1) - 1;
                            const line = code.split('\n')[lineStart];
                            
                            // Try to get function name from AST first
                            let functionInfo = getFunctionName(node, state.parents ?? []);
                            let paramCount = getParamCount(node, state.parents ?? []);

                            // Fall back to regex if AST method fails
                            if (!functionInfo && line) {
                                const beforeContent = line.substring(0, node.loc?.start.column ?? 0);
                                const name = extractFunctionNameFromCode(beforeContent);
                                if (name) {
                                    functionInfo = {
                                        name,
                                        startCh: beforeContent.lastIndexOf(name)
                                    };
                                }
                                if (!paramCount) {
                                    const lastDotIndex = beforeContent.lastIndexOf('.');
                                    if (lastDotIndex !== -1) {
                                        const afterFunction = beforeContent.slice(lastDotIndex + 1);
                                        paramCount = countParametersBeforePosition(afterFunction);
                                    }
                                }
                            }

                            // Get transform info for parameter name
                            const transform = state.hydra?.generator?.glslTransforms?.[functionInfo?.name];
                            const paramInfo = transform?.inputs?.[paramCount];
                            const paramName = paramInfo?.name ?? `val${paramCount + 1}`;
                            const paramType = paramInfo?.type;
                            const paramDefault = paramInfo?.default;

                            matches.push({
                                value: name,
                                lineNumber: lineStart,
                                ch: node.loc?.start.column ?? 0,
                                length: (node.loc?.end.column ?? 0) - (node.loc?.start.column ?? 0),
                                index: currentIndex++,
                                functionName: functionInfo?.name,
                                functionStartCh: functionInfo?.startCh,
                                functionId: generateFunctionId(functionInfo),
                                parameterIndex: paramCount,
                                paramName,
                                paramType,
                                paramDefault,
                                paramCount,
                                type: isOutput ? 'output' : 'source',
                                options: isOutput ? availableOutputs : availableSources,
                                key: generateKey({
                                    functionName: functionInfo?.name ?? '',
                                    paramName,
                                    lineNumber: lineStart,
                                    ch: node.loc?.start.column ?? 0,
                                    parameterIndex: paramCount
                                })
                            });
                        }
                    }

                    // Traverse children
                    const oldParents = state.parents || [];
                    state.parents = [...oldParents, node];
                    this.super.go.call(this, node, state);
                    state.parents = oldParents;
                }
            });

            // Start traversal with initial state
            traveler.go(ast, { parents: [], hydra });

        } catch (error) {
            console.error('Error traversing AST:', error);
        }

        return matches;
    }
} 